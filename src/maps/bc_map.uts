/** This file is part of the IgASF library.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

#include <bases/bspline.h>
#include <maps/bc_map.h>
#include <catch.hpp>

#include <array>

#include <iostream>

const real_t tol=100*std::numeric_limits<real_t>::epsilon();

SCENARIO( "Affine maps", "[maps]" ) {

    GIVEN( "x^2 2D as B-spline of degree 1" ) {

        BasisPtr b;
        {
            std::vector<BasisPtr> cs;
            cs.push_back(BasisPtr(new Bspline(2,{0,0,0,1,1,1})));
            cs.push_back(BasisPtr(new Bspline(2,{0,0,0,1,1,1})));
            b=BasisPtr(new TensorBasis(cs));
        }
        FMatrix coefs(2,9);
        coefs<<
        0,0,1,0,0,1,0,0,1,
        0,0,0,.5,.5,.5,1,1,1;

        BasisCoefficientMap Id(b,coefs );

        WHEN( "checking value")
        {
            std::vector<real_t> pts_c={.1,.5,.9};
            std::vector<view<const real_t>> cs={view<real_t>(pts_c), view<real_t>(pts_c)};
            CartesianGrid pts(cs);

            FMatrix res=Id.evaluate(pts);
            THEN ( "we obtain the right points")
            {
            auto pp=pts.toPoints();
            pp.topRows(1).array()=pp.topRows(1).array().square();
            REQUIRE( (res - pp ).norm() < tol);
            }
        }

        WHEN( "checking jacobian")
        {
            std::vector<real_t> pts_c={.1,.5,.9};
            std::vector<view<const real_t>> cs={view<real_t>(pts_c), view<real_t>(pts_c)};
            CartesianGrid pts(cs);

            FMatrix res=Id.jacobian(pts);
            FMatrix idM(2,2);
            idM.setIdentity();

            auto pp=pts.toPoints();

            THEN ( "we obtain the identity")
            {
                for (index_t pt=0; pt<res.cols(); ++pt)
                {
                    REQUIRE( abs( res(0,pt)-2*pts_c[pt%3] ) < tol);
                    REQUIRE( (res.col(pt).middleRows(1,3) - view<real_t>(idM).vector().middleRows(1,3) ).norm() < tol);
                }
            }
        }
    }

    GIVEN( "the identity map in 2D as B-spline of degree 1" ) {

        BasisPtr b;
        {
            std::vector<BasisPtr> cs;
            cs.push_back(BasisPtr(new Bspline(1,{0,0,1,1})));
            cs.push_back(BasisPtr(new Bspline(1,{0,0,1,1})));
            b=BasisPtr(new TensorBasis(cs));
        }
        FMatrix coefs(2,4);
        coefs<<
        0,1,0,1,
        0,0,1,1;

        BasisCoefficientMap Id(b,coefs );

        WHEN( "checking value")
        {
            std::vector<real_t> pts_c={.1,.5,.9};
            std::vector<view<const real_t>> cs={view<real_t>(pts_c), view<real_t>(pts_c)};
            CartesianGrid pts(cs);

            FMatrix res=Id.evaluate(pts);
            THEN ( "we obtain the same points")
            {
            REQUIRE( (res - pts.toPoints() ).norm() < tol);
            }
        }

        WHEN( "checking jacobian")
        {
            std::vector<real_t> pts_c={.1,.5,.9};
            std::vector<view<const real_t>> cs={view<real_t>(pts_c), view<real_t>(pts_c)};
            CartesianGrid pts(cs);

            FMatrix res=Id.jacobian(pts);
            FMatrix idM(2,2);
            idM.setIdentity();

            THEN ( "we obtain the identity")
            {
                for (index_t pt=0; pt<res.cols(); ++pt)
                {
                    REQUIRE( (res.col(pt) - view<real_t>(idM).vector() ).norm() < tol);
                }
            }
        }
    }

    GIVEN( "an affine map in 3D as B-spline of degree 1" ) {

        BasisPtr b;
        {
            std::vector<BasisPtr> cs;
            cs.push_back(BasisPtr(new Bspline(1,{0,0,1,1})));
            cs.push_back(BasisPtr(new Bspline(1,{0,0,1,1})));
            cs.push_back(BasisPtr(new Bspline(1,{0,0,1,1})));
            b=BasisPtr(new TensorBasis(cs));
        }
        FMatrix coefs(3,8);
        coefs<<
        0,1,0,1,0,1,0,1,
        0,0,1,1,0,0,1,1,
        0,0,0,0,1,1,1,1 ;

        FMatrix A(3,3);
        A<<
        1, 1.5, 3,
        0, 2,   3,
        0, 0,  -1;

        std::vector<real_t> v={5,7,9};

        BasisCoefficientMap Id(b,(A *coefs).colwise()+view<real_t>(v).vector() );

        WHEN( "computing the jacobian")
        {
            std::vector<real_t> pts_c={.1,.5,.9};
            std::vector<view<const real_t>> cs={view<real_t>(pts_c), view<real_t>(pts_c),view<real_t>(pts_c) };
            CartesianGrid pts(cs);

            FMatrix res=Id.jacobian(pts);
            THEN ( "then we obtain A")
            {
                for (index_t pt=0; pt<res.cols(); ++pt)
                {
                    REQUIRE( (res.col(pt) - view<real_t>(A).vector() ).norm() < tol);
                }
            }
        }
    }
}
